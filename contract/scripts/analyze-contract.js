const { ethers } = require("hardhat");
const fs = require("fs");

async function analyzeContract() {
  console.log("üîç Detailed RWAManager Analysis...");
  
  const RWAManager = await ethers.getContractFactory("RWAManager");
  
  // Analyse du bytecode
  const bytecode = RWAManager.bytecode;
  const deployedBytecode = RWAManager.deployedBytecode;
  const interface = RWAManager.interface;
  
  const creationSize = (bytecode.length - 2) / 2;
  const deployedSize = (deployedBytecode.length - 2) / 2;
  
  console.log("üìä SIZE ANALYSIS");
  console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
  console.log(`üì¶ Creation bytecode: ${creationSize.toLocaleString()} bytes`);
  console.log(`üöÄ Deployed bytecode: ${deployedSize.toLocaleString()} bytes`);
  console.log(`üìè Size difference: ${(creationSize - deployedSize).toLocaleString()} bytes`);
  
  // Limites par r√©seau
  const limits = {
    ethereum: 24576,
    polygon: 24576,
    chiliz: 24576, // M√™me limite que Ethereum
    bsc: 24576
  };
  
  console.log("\nüåê NETWORK COMPATIBILITY");
  console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
  Object.entries(limits).forEach(([network, limit]) => {
    const percentage = ((deployedSize / limit) * 100).toFixed(2);
    const remaining = limit - deployedSize;
    const status = deployedSize <= limit ? "‚úÖ" : "‚ùå";
    console.log(`${status} ${network.toUpperCase()}: ${percentage}% (${remaining} bytes remaining)`);
  });
  
  // Analyse des fonctions
  console.log("\nüîß FUNCTION ANALYSIS");
  console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
  const functions = Object.values(interface.functions);
  console.log(`üìã Total functions: ${functions.length}`);
  console.log(`üîí View functions: ${functions.filter(f => f.stateMutability === 'view').length}`);
  console.log(`üí∞ Payable functions: ${functions.filter(f => f.stateMutability === 'payable').length}`);
  console.log(`‚úèÔ∏è  Non-payable functions: ${functions.filter(f => f.stateMutability === 'nonpayable').length}`);
  
  // Analyse des events
  const events = Object.values(interface.events);
  console.log(`üì¢ Total events: ${events.length}`);
  
  // Suggestions d'optimisation
  console.log("\nüí° OPTIMIZATION SUGGESTIONS");
  console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
  
  if (deployedSize > 20000) {
    console.log("‚ö†Ô∏è  Contract is large (>20KB). Consider:");
    console.log("   ‚Ä¢ Split into multiple contracts");
    console.log("   ‚Ä¢ Use libraries for common functions");
    console.log("   ‚Ä¢ Remove unused imports");
    console.log("   ‚Ä¢ Optimize string storage");
  }
  
  if (deployedSize > limits.ethereum) {
    console.log("üö® Contract exceeds size limit! Actions needed:");
    console.log("   ‚Ä¢ MUST split contract");
    console.log("   ‚Ä¢ Use proxy pattern");
    console.log("   ‚Ä¢ Move logic to libraries");
  }
  
  // Sauvegarder l'analyse
  const analysis = {
    timestamp: new Date().toISOString(),
    creationSize,
    deployedSize,
    functions: functions.length,
    events: events.length,
    networkCompatibility: Object.entries(limits).map(([network, limit]) => ({
      network,
      compatible: deployedSize <= limit,
      usage: ((deployedSize / limit) * 100).toFixed(2) + '%'
    }))
  };
  
  fs.writeFileSync('contract-analysis.json', JSON.stringify(analysis, null, 2));
  console.log("\nüíæ Analysis saved to contract-analysis.json");
}

analyzeContract()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå Analysis failed:", error);
    process.exit(1);
  });